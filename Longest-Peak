using namespace std;

int longestPeak(vector<int> array) {
  // Write your code here.
	
	if(!array.size() || array.size() == 1 || array.size() == 2)
		return 0;

	vector<int> peaks;
	
	int peak = 1, lastComparison = 1;
	
	if(array[0] < array[1]) 
		lastComparison = 1;	
	
	else if(array[0] > array[1]) 
		lastComparison = 0;	
	
	for(int i = 0; i < array.size() - 1; i++) {
		int curr = array[i];
		int next = array[i + 1];
		
		if(lastComparison == 1 && curr > next) 
			peak++; lastComparison = 0;
		
		else if(lastComparison == 1 && curr < next) 
			peak++;
		
		else if(lastComparison == 1 && curr == next) 
			peak = 1; lastComparison = -1;
		
		else if(lastComparison == 0 && curr > next && peak > 1) 
			peak++;
		
		else if(lastComparison == 0 && curr < next) {
			if(peak > 1)
				peaks.push_back(peak);
			peak = 2;
			lastComparison = 1;
		}
		else if(lastComparison == 0 && curr == next) {
			if(peak > 1)
				peaks.push_back(peak);
			peak = 1;
			lastComparison = -1;
		}
		
		else if(lastComparison == -1 && curr > next) 
			peak = 1; lastComparison = 0;
		
		else if(lastComparison == -1 && curr < next) 
			peak++; lastComparison = 1;
		
	}
	
	if(peak > 1 && lastComparison == 0)
			peaks.push_back(peak);
	
	if(peaks.size()) 
		return *max_element(peaks.begin(), peaks.end());
	
	return 0;
}
